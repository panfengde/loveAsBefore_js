//解析xml字符串，获取信息
(define xml "<div id="test" ids="texst">loveAsBefore<span>xxxx</span></div>")



(define (xml2list xml)
    (define result (list))
    (define oneChild "")
    (define start false)
    ((. xml "foreEach") (lambda (x)
        (if (! start)
            (if (!= x " ") (set! start true))
        )
        
        (if start
            (if (= x "<")
                (begin "组件逻辑")
                (begin "文字逻辑"
                    (+= oneChild x)
                )
            )
        )
        
    ))
    (lambda (x)
    
    )
)

(define (parseComponents xml )

    (define tagResult "")
    (define _start false)
    (define _tagInfoEnd false)
    (define _childFlag  1)
    (define _getChild "")
    (define childResult "")
    ((. xml "forEach")
        (lambda (x index) 
            (if (! _tagInfoEnd) 
                (begin
                    (if (! _start)
                        (if (= x "<") (set! _start true)  )
                    )
                    (if _start
                        (begin 
                            (if (and _start  (!= x "<") (!= x ">"))
                                (+= tagResult x)
                            )
                            (if (= x ">") (begin (set! _tagInfoEnd true)))
                        )
                    )
                )
                (if (!=  _childFlag 0)
                    (begin 
                        (cond 
                            ((= x "<") (+= _childFlag 1))
                            ((= x "/") (-= _childFlag 2))
                            (else '())
                        )
                        (+= _getChild x)
                    )
                )
            )
        )
    )
    (define __childLength ((. _getChild "length")))
    (if (= ((. _getChild "index") (- __childLength 1)) "/") 
        (begin
            (define _temp __childLength)
            (define _temp2 __childLength)
            (do (= _temp _temp2) 
                (if (= ((. _getChild "index")  (- __childLength 1 ) ) "<")
                    (set! _temp (-= __childLength 1))
                    (-= __childLength 1 )
                )
            )
            ((. _getChild "forEach") 
                (lambda (x index)
                    (if (< index (- _temp 1))
                        (+= childResult x)
                    )
                )
            )
        )
    )
    
    (parseTag tagResult)
    childResult

)

(define (parseTag tagIngo)
    (display tagIngo)
    (define tag "")
    (define tagEnd false)
    (define child false)
    (define arrInfo (json ))
    (define arrName "")
    (define arrNamestart false)
    (define arrNameEnd false)
    (define arrValue "")
    (begin
        ((. tagIngo "forEach") (lambda (x)
               
            (if tagEnd
                (begin
                    
                    (if (= x "=")
                        (set! arrNameEnd true)
                    )

                    (if (and (!= x " ") (!= x "="))
                        (if arrNameEnd (+= arrValue x)  (+= arrName x))
                    )
                    (if (and (= x " ") arrNameEnd )
                        (begin
                            ((. arrInfo "insert") (: arrName arrValue))
                            (set! arrName "")
                            (set! arrNamestart false)
                            (set! arrNameEnd false)
                            (set! arrValue "")
                        )
                    )
                   
                )
                (if (= x " ")
                    (if (!= tag "") (set! tagEnd true))
                    (+= tag x)
                )

            )
        
        ))
    )

    (if (!= arrValue "")
        ((. arrInfo "insert") (: arrName arrValue))
    )

    arrInfo
 )
 
(parseComponents xml)















// txt
// (cons "hello" "world")
//  (json 
//     (: "tag" "div")
//     (: "id" "a")
//  )

//  (define a (json 
//                  (: "tag" "div")
//                  (: "id" "a")
//  )
//  )
//  (define b (json 
//                  (: "tag" "span")
//                  (: "id" "b")
//  ))

//  (define c (json 
//                  (: "a" a)
//                  (: "b" b)
//  ))

//  (define xmlList (list 
//                  a
//                  b
//                  c
//  ))

//  xmlList