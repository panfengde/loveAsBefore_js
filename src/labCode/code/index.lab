


; (define a 10)
; (set! a 15)
; a
(display "goo")
(let* 
    (
        (a 10)
        (b (+ a 10))
    )
    (cond
        ((= b 10) (display "b"))
        ((= a 10) (display "a"))
    )
)

(display "let--cond")

(let 
    (
        (n 3)
    )
    (display n)
    (cond 
        ((= n 2) 1)
        ((= n 3) 3)
        (else "other")
    )
    (display "ok")
)

(define (pask row)
    (define (pask_iter row line)
        (cond
            ((= row line) 1)
            ((= row 1) 1)
            ((= line 1) 1)
            (else
               (+
                 (pask_iter (- row 1 ) (- line 1))
                 (pask_iter (- row 1 ) line)
               )
            )
        )
    )
    (define (foreach row line)
            (cond
                ((= row line 1) (display ""))
                ((= line 1) (begin (display "\r\n")  (foreach (- row 1) (-  row 1)) ))
                (else (foreach row (- line 1)))
            )
    )
    (foreach row row)
)


(define (fib n)
    (cond
        ((= n 0) 0)
        ((= n 1) 1)
        (else  (+ (fib (- n 1)) (fib (- n 2))))
    )
)

(define (fib2 n)
    (define (square a _n)
        (if (= _n 1)
            a
            (* a (square a (- _n 1)))
        )
     )
    (/ (square 1.618 n) 2.2360679774998)
)

(fib 5) 
(fib 16)  
(fib2 5)
(fib2 16) 


(class animal2
    (constructor (name_num mouse_num go) 
        ((set! (. this "name") name_num)
        ((set! (. this "mouse") mouse_num)
        ((set! (. this "go") go)       
    )
    (define (a x) (display x (. this "go") "-------") (display "hhhhhh"))
)

(define xxx "hello class")

(define temp_ (animal2 "pf" 1 xxx))
((. temp_ "a") 1)

(define a (animal "name-------1111-----"    "aaaa"   111555 ))

(. a "go")
(. a "name")
((. a "a") "123455")

(define b (animal "name-------222-----"     "bbbbb" 22))
(. b "name")
((. b "a") "xcvbn")

(define (forEach list fun)
    (if (nullList  list)
        '()
        (begin (fun (car list) ) (forEach (cdr list) fun))
    )
)
(forEach  '(1 2 3 4)  (lambda (x) (display (+ x 10))))




