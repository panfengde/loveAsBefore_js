; (define a 10)
; (define (go x) (+ x 1) (+ x 100))
; (go a)

; (define-syntax when
;     (syntax-rules ()
;       ((_ pred b1 ...)
;        (if pred (begin b1 ...) '()))))


; (when 1 (+ 1 1) (display (+ 10 100)))





; (define-syntax let*
;     (syntax-rules ()
;       ((_ ((p v)) b ...)
;        (let ((p v)) b ...))
;       ((_ ((p1 v1) (p2 v2) ...1) b ...2)
;        (let ((p1 v1))
;          (let* ((p2 v2) ...1)
;           b ...2)))))


; (let* 
;     (
;         (a 10)
;         (b (+ a 10))
;     )
;     (display b)
;     (display (+ a b))
; )

; (define-syntax :
;     (syntax-rules ()
;     ((_ key value) (cons key value))
;     )
; )

; (define-syntax .
;     (syntax-rules  ()
;         ((_ a b) (get a b))
;         ((_ a b c) (get (get a b) c))
;         ((_ a b c ...) (get (get (get a b) c) ...))
;     )
; )


; (define a (json (:  "hello" 1)))

; (set! (. a "hello") 1000)

; (display (. a "hello"))




// (define-syntax .
//     (syntax-rules  ()
//         ((_ a b) (get a b))
//         ((_ a b c) (get (get a b) c))
//         ((_ a b c ...) (get (get (get a b) c) ...))
//     )
// )

// (class animal
//     (constructor (color_1 wheel_1) 
//         (set! (. this "color") color_1)
//         (set! (. this "wheel") wheel_1)
//     )
//     (define (a x) (display (. this "color")  x  "okokokokok??????????" ))
// )

// (define one (new animal "aaa" 11111) )

// (display (. one "color"))
// (display (. one "wheel"))
// (set! (. one "color") "?????")
// (display (. one "color"))
// (display (. one "wheel"))





(define-syntax -=
    (syntax-rules   ()
        ((_ a b) (begin (set! a (- a b)) a))
        ((_ a b ...) (begin (set! a (- a b ...)) a))
    )
)

(define-syntax do
    (syntax-rules ()
        ((_ e b) 
            (if e 
                b
                (begin b (do e b) ) 
            )
        )
    )
)


(define a 10)

a

(do (= 10 1) (begin  (display "err")))

a