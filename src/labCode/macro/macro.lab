(define-syntax let*
    (syntax-rules ()
      ((_ ((p v)) b ...)
       (let ((p v)) b ...))
      ((_ ((p1 v1) (p2 v2) ...1) b ...2)
       (let ((p1 v1))
         (let* ((p2 v2) ...1)
          b ...2)))))

(define-syntax when
    (syntax-rules ()
      ((_ pred b1 ...)
       (if pred (begin b1 ...) '()))))




(define-syntax and
    (syntax-rules ()
        ((_ e) (begin e))
        ((_ e1 e2 )
            (if e1
                (and e2)
                ))
        ((_ e1 e2 ...)
            (if e1
                (and e2 ... )
                ))
    )
)
(define-syntax do
    (syntax-rules ()
        ((_ e b) 
            (if e 
                b
                (begin b (do e b) ) 
            )
        )
    )
)

(define-syntax :
    (syntax-rules ()
    ((_ key value) (cons key value))
    )
)

(define-syntax +=
    (syntax-rules ()
        ((_ a b) (begin (set! a (+ a b)) a))
        ((_ a b ...) (begin (set! a (+ a b ...)) a))
    )
)

(define-syntax -=
    (syntax-rules   ()
        ((_ a b) (begin (set! a (- a b)) a))
        ((_ a b ...) (begin (set! a (- a b ...)) a))
    )
)

(define-syntax .
    (syntax-rules  ()
        ((_ a b) (get a b))
        ((_ a b c) (get (get a b) c))
        ((_ a b c ...) (get (get (get a b) c) ...))
    )
)

; (define-syntax  cond
;     (syntax-rules ()
;         (
;             (_ (e1 ...1) ) (if e1 (begin ...1))
;         )
;         (
;             (_ (e1 ...1) ...2)
;             (if e1
;                 (begin ...1)
;                 (cond (...2))
;             )
;         )
;     )
; )

(define-syntax cond
    (syntax-rules ()
        ((_ ( e1 ...))
        (if e1 (begin ...)))
        ((_ (e1 ...1) c1 ...2)
        (if e1
            (begin ...1)
            (cond c1 ...2)))))

; (define (hello x)
;     (cond
;     ((= x "=") (+ 1 1) (display "!!" x))
;     ((= x ">") (+ 1 1) (display "??" x))
;     (else (+ 1 1) (display "else" x) )
; )
; )
; (hello "=")
; (hello ">")
; (hello 1)
