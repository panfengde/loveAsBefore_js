(define-syntax let*
    (syntax-rules ()
      ((_ ((p v)) b ...)
       (let ((p v)) b ...))
      ((_ ((p1 v1) (p2 v2) ...) b ...)
       (let ((p1 v1))
         (let* ((p2 v2) ...)
          b ...)))))

(define-syntax when
    (syntax-rules ()
      ((_ pred b1 ...)
       (if pred (begin b1 ...) '()))))

(define-syntax cond
    (syntax-rules ()
        ((_ (else e1 ...))
        (begin e1 ...))
        ((_ (e1 e2 ...))
        (when e1 e2 ...))
        ((_ (e1 e2 ...) c1 ...)
        (if e1
        (begin e2 ...)
        (cond c1 ...)))))

(define-syntax and
    (syntax-rules ()
        ((_ e) e)
        ((_ e1 e2 )
        (if e1
            (and e2)
            '()))
        ((_ e1 e2 ...)
        (if e1
            (and e2 ...)
            ))
    )
)

(define-syntax :
    (syntax-rules ()
    ((_ key value) (cons key value))
    )
)

(define-syntax .
    (syntax-rules ()
        ((_ obj key ...) ((obj key) obj ...))
    )
)

(define (go x)
    (display "111")
    (display this)
    (display _arguments)
    (+ x 1)
)

(go 10000)

// (define (hello params)
//     (lambda () 

//     )
// )

// ()



// (define (class params)
//     (
//         (lambda ()
//         )
//     )
// )

// (list 1 2 3 4)
// (quote ( 1 2 3 4))

// (json (: 1 2) (: 3 4))


// (define-syntax list
//     (syntax-rules ()
//         ((_ a ) (quote (a)))
//         ((_ a b ...) (quote (a b ...)))
//     )
// )

// (define-syntax json
//     (syntax-rules ()
//         ((_ a ) (quote (a)))
//         ((_ a b ...) (quote (a b ...)))
//     )
// )

