(define-syntax let*
    (syntax-rules ()
      ((_ ((p v)) b ...)
       (let ((p v)) b ...))
      ((_ ((p1 v1) (p2 v2) ...1) b ...2)
       (let ((p1 v1))
         (let* ((p2 v2) ...1)
          b ...2)))))

(define-syntax when
    (syntax-rules ()
      ((_ pred b1 ...)
       (if pred (begin b1 ...) '()))))


(define-syntax cond
    (syntax-rules ()
        ((_ (else e1 ...))
        (begin e1 ...))
        ((_ (e1 e2 ...))
        (when e1 e2 ...))
        ((_ (e1 e2 ...1) c1 ...2)
        (if e1
        (begin e2 ...1)
        (cond c1 ...2)))))

(define-syntax and
    (syntax-rules ()
        ((_ e) (begin e))
        ((_ e1 e2 )
            (if e1
                (and e2)
                ))
        ((_ e1 e2 ...)
            (if e1
                (and e2 ... )
                ))
    )
)



(define-syntax do
    (syntax-rules ()
        ((_ e b) 
            (if e 
                b
                (begin b (do e b) ) 
            )
        )
    )
)



(define-syntax :
    (syntax-rules ()
    ((_ key value) (cons key value))
    )
)


(define-syntax +=
    (syntax-rules ()
        ((_ a b) (begin (set! a (+ a b)) a))
        ((_ a b ...) (begin (set! a (+ a b ...)) a))
    )
)

(define-syntax -=
    (syntax-rules ()
        ((_ a b) (begin (set! a (- a b)) a))
        ((_ a b ...) (begin (set! a (- a b ...)) a))
    )
)


